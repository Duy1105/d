const fs = require("fs");
const fse = require("fs-extra");
const path = require("path");
const axios = require("axios");
const moment = require("moment-timezone");

module.exports.config = {
  name: "sendnoti",
  version: "1.1.0",
  hasPermssion: 2,
  credits: "ZGToan Official ‚Ä¢ refactor by ChatGPT",
  description: "G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ nh√≥m v√† nh·∫≠n ph·∫£n h·ªìi hai chi·ªÅu",
  commandCategory: "admin",
  usages: "[msg] (c√≥ th·ªÉ reply k√®m file)",
  cooldowns: 5
};

const cacheDir = path.join(__dirname, "cache");
fse.ensureDirSync(cacheDir);

// t·∫£i 1 url v·ªÅ file t·∫°m
async function downloadToTemp(url, filenameHint = "file") {
  const { data, headers } = await axios.get(url, { responseType: "arraybuffer" });
  let ext = path.extname(new URL(url).pathname) || "";
  if (!ext) {
    const ct = (headers["content-type"] || "").toLowerCase();
    if (ct.includes("image/")) ext = `.${ct.split("/")[1]}`;
    else if (ct.includes("video/")) ext = `.${ct.split("/")[1]}`;
    else if (ct.includes("audio/")) ext = `.${ct.split("/")[1]}`;
    else ext = ".bin";
  }
  const filePath = path.join(cacheDir, `${Date.now()}_${filenameHint}${ext}`);
  fs.writeFileSync(filePath, data);
  return filePath;
}

// chu·∫©n h√≥a ƒë√≠nh k√®m t·ª´ event.attachments ‚Üí tr·∫£ v·ªÅ m·∫£ng filePaths
async function materializeAttachments(atts = []) {
  const files = [];
  for (const a of atts) {
    if (!a?.url) continue;
    const hint = a?.type || "att";
    try {
      const p = await downloadToTemp(a.url, hint);
      files.push(p);
    } catch (e) {
      console.error("[sendnoti] download attachment error:", e.message);
    }
  }
  return files;
}

// t·∫°o object g·ª≠i tin nh·∫Øn k√®m ƒë√≠nh k√®m (ReadStream m·ªõi m·ªói l·∫ßn)
function buildMessage(body, filePaths = []) {
  return {
    body,
    attachment: filePaths.map(p => fs.createReadStream(p))
  };
}

// ti·ªán √≠ch th·ªùi gian VN
function nowVN() {
  return moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss");
}

module.exports.handleReply = async function ({ api, event, handleReply, Users, Threads }) {
  const { threadID, messageID, senderID, body = "", attachments = [] } = event;
  const name = await Users.getNameUser(senderID);
  const timeStr = nowVN();

  switch (handleReply.type) {
    // Nh·∫≠n ph·∫£n h·ªìi ·ªü NH√ìM ‚Üí chuy·ªÉn v·ªÅ ADMIN
    case "fromGroup": {
      const groupName = (await Threads.getInfo(threadID))?.threadName || "Unknown";
      const head =
        `=== [ s·¥á…¥·¥Ö…¥·¥è·¥õ…™ ] ===\n` +
        `‚è∞ ùôèùôûùô¢ùôö: ${timeStr}\n` +
        `üë§ ùôèùô™ÃõÃÄ: ${name}\n` +
        `üë• ùòΩùô§ùô≠: ${groupName}\n` +
        `üìù ùôâùô§Ã£ÃÇùôû ùôôùô™ùô£ùôú: ${body || "(kh√¥ng n·ªôi dung)"}`;

      const tempFiles = await materializeAttachments(attachments);
      const msg = buildMessage(head, tempFiles);

      api.sendMessage(msg, handleReply.adminThreadID, (err, info) => {
        // d·ªçn file
        for (const p of tempFiles) { try { fs.unlinkSync(p) } catch {} }
        if (err) return;

        // set c·∫ßu n·ªëi ng∆∞·ª£c: admin reply ‚Üí quay l·∫°i nh√≥m
        global.client.handleReply.push({
          name: module.exports.config.name,
          type: "fromAdmin",
          messageID: info.messageID,
          adminThreadID: handleReply.adminThreadID,
          targetThreadID: handleReply.targetThreadID
        });
      });
      break;
    }

    // Admin reply ·ªü THREAD ADMIN ‚Üí chuy·ªÉn l·∫°i NH√ìM
    case "fromAdmin": {
      const head =
        `=== s·¥á…¥·¥Ö…¥·¥è·¥õ…™ ===\n` +
        `‚è∞ ùôèùôûùô¢ùôö: ${timeStr}\n` +
        `üë§ ùôÅùôßùô§ùô¢: ${name}\n` +
        `üìù ùôâùô§Ã£ÃÇùôû ùôôùô™ùô£ùôú: ${body || "(kh√¥ng n·ªôi dung)"}\n` +
        `‚Ü©Ô∏è ùôçùôöùô•ùô°ùôÆ ùô©ùôûùô£ ùô£ùôùùôñÃÜÃÅùô£ ùô£ùôñÃÄùôÆ ƒëùôöÃÇÃâ ùôóùôñÃÅùô§ ùô´ùôöÃÇÃÄ ùôñùôôùô¢ùôûùô£`;

      const tempFiles = await materializeAttachments(attachments);
      const msg = buildMessage(head, tempFiles);

      api.sendMessage(msg, handleReply.targetThreadID, (err, info) => {
        for (const p of tempFiles) { try { fs.unlinkSync(p) } catch {} }
        if (err) return;

        // n·ªëi chi·ªÅu v·ªÅ admin ti·∫øp
        global.client.handleReply.push({
          name: module.exports.config.name,
          type: "fromGroup",
          messageID: info.messageID,
          adminThreadID: handleReply.adminThreadID,
          targetThreadID: handleReply.targetThreadID
        });
      }, handleReply.replyToAdminMsgID /* c√≥ th·ªÉ undefined */);
      break;
    }
  }
};

module.exports.run = async function ({ api, event, args, Users }) {
  const { threadID, messageID, senderID, type, messageReply } = event;

  const content = args.join(" ").trim();
  if (!content && type !== "message_reply")
    return api.sendMessage("Vui l√≤ng nh·∫≠p n·ªôi dung ho·∫∑c reply k√®m file.", threadID, messageID);

  const senderName = await Users.getNameUser(senderID);
  const timeStr = nowVN();

  // body g·ª≠i ƒëi
  const baseBody =
    `=== ·¥õ ú·¥èÃÇ…¥…¢  ô·¥ÄÃÅ·¥è ===\n` +
    `‚è∞ ùôèùôûùô¢ùôö: ${timeStr}\n` +
    `üìù ùôâùô§Ã£ÃÇùôû ùôôùô™ùô£ùôú: ${content || "(kh√¥ng n·ªôi dung)"}\n` +
    `üë§ ùôèùô™ÃõÃÄ: ${senderName}\n` +
    `‚Ü©Ô∏è ùôçùôöùô•ùô°ùôÆ ùô©ùôûùô£ ùô£ùôùùôñÃÜÃÅùô£ ùô£ùôñÃÄùôÆ ùôôùôöÃÇÃâ ùôóùôñÃÅùô§ ùô´ùôöÃÇÃÄ ùôñùôôùô¢ùôûùô£`;

  // n·∫øu admin reply k√®m file ·ªü l·ªánh, t·∫£i file 1 l·∫ßn ‚Äì t√°i s·ª≠ d·ª•ng cho m·ªçi nh√≥m
  let broadcastFiles = [];
  if (type === "message_reply" && Array.isArray(messageReply?.attachments) && messageReply.attachments.length) {
    broadcastFiles = await materializeAttachments(messageReply.attachments);
  }

  const allThread = global.data.allThreadID || [];
  let ok = 0, fail = 0;

  // g·ª≠i l·∫ßn l∆∞·ª£t (c√≥ th·ªÉ ƒë·ªïi sang Promise.allSettled n·∫øu mu·ªën ch·∫°y song song)
  for (const toTid of allThread) {
    const msg = buildMessage(baseBody, broadcastFiles);
    await new Promise(resolve => {
      api.sendMessage(msg, toTid, (err, info) => {
        if (err) { fail++; return resolve(); }
        ok++;

        // thi·∫øt l·∫≠p c·∫ßu n·ªëi: n·∫øu nh√≥m reply ‚Üí g·ª≠i v·ªÅ admin thread
        global.client.handleReply.push({
          name: module.exports.config.name,
          type: "fromGroup",
          messageID: info.messageID,
          adminThreadID: threadID,          // n∆°i admin ch·∫°y l·ªánh
          targetThreadID: toTid,            // nh√≥m ƒë√≠ch
          replyToAdminMsgID: messageID      // ƒë·ªÉ reply ch·ªìng l√™n tin admin (t√πy nhu c·∫ßu)
        });
        resolve();
      });
    });
  }

  // d·ªçn file sau khi broadcast xong
  for (const p of broadcastFiles) { try { fs.unlinkSync(p) } catch {} }

  api.sendMessage(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi ${ok} nh√≥m, th·∫•t b·∫°i ${fail} nh√≥m.`, threadID, messageID);
};
